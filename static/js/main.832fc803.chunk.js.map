{"version":3,"sources":["Components/Land.js","Components/Picker.js","App.js","serviceWorker.js","index.js","Components/styles.module.css"],"names":["Land","props","minecat","Category","useState","area","setArea","taxable","setTaxable","Pay","setPay","numberWithCommas","x","toString","replace","taxableLand","Math","max","tax","payableTax","Payable","className","classes","cat","Form","style","width","Group","controlId","Label","Control","type","placeholder","value","onChange","event","target","Text","buttonContainer","Button","variant","btn","onClick","alert","preventDefault","Tax","marginLeft","display","justifyContent","marginTop","fontSize","Picker","category","setCategory","mine","setMine","cont","as","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.832fc803.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport classes from \"./styles.module.css\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\n\r\nconst Land = (props) => {\r\n  const minecat = props.minecat;\r\n  const Category = props.Category;\r\n  const [area, setArea] = useState(\"\");\r\n  const [taxable, setTaxable] = useState(0);\r\n  const [Pay, setPay] = useState(0);\r\n  const inputHandler = (event) => {\r\n    setArea(event.target.value);\r\n  };\r\n\r\n  function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n  const taxableLand = Math.max(0, area - 10000);\r\n\r\n  const tax = numberWithCommas(taxableLand);\r\n\r\n  const Payable = (Category, taxableLand, minecat) => {\r\n    if (Category === \"industrial\") {\r\n      return taxableLand * 2;\r\n    } else if (Category === \"commercial\") {\r\n      return taxableLand * 3;\r\n    } else if (minecat === \"lead\") {\r\n      return taxableLand * 15;\r\n    } else if (minecat === \"copper\") {\r\n      return taxableLand * 15;\r\n    } else if (minecat === \"rock\") {\r\n      return taxableLand * 210;\r\n    } else if (minecat === \"cement\") {\r\n      return taxableLand * 6;\r\n    } else if (minecat === \"major\") {\r\n      return taxableLand * 3;\r\n    } else if (minecat === \"dolomite\") {\r\n      return taxableLand * 2;\r\n    } else if (minecat === \"minor\") {\r\n      return taxableLand * 0.2;\r\n    } else if (minecat === \"\" || Category === \"\") {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  const payableTax = numberWithCommas(Payable(Category, taxableLand, minecat));\r\n\r\n  const CalculateHandler = (event) => {\r\n    if (area === \"\") {\r\n      alert(\"value can not be zero\");\r\n    } else if (area < 10000) {\r\n      alert(\"no tax\");\r\n    } else {\r\n      setTaxable(tax);\r\n      setPay(payableTax);\r\n    }\r\n    event.preventDefault();\r\n  };\r\n\r\n  const clearHandler = (event) => {\r\n    setTaxable(0);\r\n    setPay(0);\r\n    setArea(\"\");\r\n    event.preventDefault();\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={classes.cat}>\r\n        <Form style={{ width: \"40%\" }}>\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>Area of your Land</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              placeholder=\"Area\"\r\n              value={area}\r\n              onChange={inputHandler}\r\n            />\r\n            <Form.Text className=\" font-italic \">\r\n              Value entered is in square feet\r\n            </Form.Text>\r\n          </Form.Group>\r\n          <div className={classes.buttonContainer}>\r\n            <Button\r\n              variant=\"success\"\r\n              className={classes.btn}\r\n              type=\"submit\"\r\n              onClick={CalculateHandler}\r\n            >\r\n              Calculate\r\n            </Button>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" onClick={clearHandler}>\r\n              Clear\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n      <div className={classes.Tax}>\r\n        <h3>Taxable Land:</h3>\r\n        <h3 style={{ marginLeft: 5 }}>{taxable} sq.ft</h3>\r\n      </div>\r\n      <div className={classes.Tax}>\r\n        <h3>Payable Tax:</h3>\r\n        <h3 style={{ marginLeft: 5 }}>{Pay} â‚¹</h3>\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          marginTop: 20,\r\n          fontSize: 25,\r\n        }}\r\n      >\r\n        Note : Intrest and Penalty on Payable Tax may be applicable as per land\r\n        tax rules\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Land;\r\n","import React, { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport classes from \"./styles.module.css\";\r\nimport Land from \"./Land\";\r\nconst Picker = () => {\r\n  const [category, setCategory] = useState(\"industrial\");\r\n  const [mine, setMine] = useState(\"\");\r\n\r\n  const HandleCat = (event) => {\r\n    setCategory(event.target.value);\r\n  };\r\n  const Handlemine = (event) => {\r\n    setMine(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.cont}>\r\n      <div className={classes.cat}>\r\n        <Form style={{ width: \"40%\" }}>\r\n          <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n            <Form.Label style={{ fontSize: 20 }}>\r\n              Select category of Land\r\n            </Form.Label>\r\n            <Form.Control as=\"select\" value={category} onChange={HandleCat}>\r\n              <option value=\"industrial\">Industrial</option>\r\n              <option value=\"commercial\">Commercial</option>\r\n              <option value=\"mining\">Mining</option>\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n      <div\r\n        style={\r\n          category === \"mining\" ? { display: \"flex\" } : { display: \"none\" }\r\n        }\r\n        className={classes.mine}\r\n      >\r\n        <Form style={{ width: \"40%\" }}>\r\n          <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n            <Form.Label>Select category of Land</Form.Label>\r\n            <Form.Control as=\"select\" value={mine} onChange={Handlemine}>\r\n              <option value=\"\">Select class</option>\r\n              <option value=\"lead\">Lead zinc bearing land</option>\r\n              <option value=\"copper\">copper bearing land</option>\r\n              <option value=\"rock\">Rock phosphatic bearing Lands</option>\r\n              <option value=\"cement\">\r\n                Cement and sms grade limestone bearing land\r\n              </option>\r\n              <option value=\"major\">Other major mineral bearing land</option>\r\n              <option value=\"dolomite\">\r\n                Dolomite,felspar,fuller earth(other than cement & SMS grade\r\n                Limestone)\r\n              </option>\r\n              <option value=\"minor\">Other minor mineral bearing land</option>\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n      <Land Category={category} minecat={mine} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Picker;\r\n","import React from \"react\";\nimport \"./index.css\";\nimport Picker from \"./Components/Picker\";\nconst App = (props) => {\n  return (\n    <section className=\"background\">\n      <div className=\"container-lg \" style={{ marginTop: 20 }}>\n        <h1 className=\"title\">Rajasthan land tax calculator</h1>\n        <Picker />\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cont\":\"styles_cont__9Yzsz\",\"cat\":\"styles_cat__2swCd\",\"mine\":\"styles_mine__2sP9D\",\"buttonContainer\":\"styles_buttonContainer__RW1lW\",\"Tax\":\"styles_Tax__2-Fh4\",\"btn\":\"styles_btn__2mGTe\"};"],"sourceRoot":""}